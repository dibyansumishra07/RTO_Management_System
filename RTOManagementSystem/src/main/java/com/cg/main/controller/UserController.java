package com.cg.main.controller;

/*
 * @Author: Dibyansu Mishra
 * @Start Date:19MAY2020 
 * @Update Date: 25MAY2020 [18:42]
 */

import java.time.LocalDate;

import java.time.format.DateTimeFormatter;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.cg.main.model.User;
import com.cg.main.service.IUserService;

//Connecting with front end
@CrossOrigin(origins = {"http://localhost:4200"}, allowedHeaders = "*")
//Creating a controller class
//Making a rest controller class which send data in JSON format [@Controller+@ResopnseBody] 
@RestController
//Mapping request with corresponding class or methods: @RequestMapping
@RequestMapping("/rto/user")
public class UserController {
//	Autowiring with service class 
	@Autowired
	private IUserService service;
	
	private static final Logger logger;

	static {
		logger = LoggerFactory.getLogger(User.class);
	}
	
	

	/*
	  * @Params: RequestBody User user
	  * @Name: applyLl
	  * @Return: List<String> [appId, LlNo]
	  * @PassByUrl: Null
	  * @PassJsonVariables:  {"userName": ,"vehicleType": ,"phNo": , "dob": , "gender": , "bloodGroup": ,"address": , "state": , "country": , "pin": , "adhar": , "bloodGroupCertificate": , "certificate": }
	  * @Desc: User applies Learning license 
	  */
	
	@CrossOrigin("*")
	
	@PostMapping("/applyLl")
	public User applyLl(@RequestBody User user) {
		try {
			logger.info("Accessing LL Page");
			user.setApplyDate(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/YYYY")).toString());
	    	user.setExpiryDate((LocalDate.now().plusDays(1)).format(DateTimeFormatter.ofPattern("dd/MM/YYYY")).toString());
	    	logger.info("calling service.addUser and sending User");
	    	//Validating the duplicates one
	    	
    	    List<User> users=service.getAllLic();
    	    String random=service.generateRandom();
    	    for(User itemUser: users) {
    	        if(itemUser.getLlNo().equals(random)){
    	        	random=service.generateRandom();
    	        }
    	        
    	        if(itemUser.getPhNo().equals(user.getPhNo())) {
    	        	return null;
    	        }
    	    }
    	  
	        	user.setLlNo(random);
	        
	    	
			User usr = service.addUser(user);
			logger.info("Sending User data to frontend");
			
			//Sending mail to the user
			String output= String.format("Hey, %s\n\nYour LL is applied Succssfully,\nYour Application ID is: %d\nYour LL Number is:%s\nYour LL Expiry Date is: %s\n\n\t**Do not try to reply, this is autogenerated mail**",usr.getUserName(),usr.getAppId(),usr.getLlNo(),usr.getExpiryDate());
			Boolean test=service.sendMail(usr.getEmail(), "RTO - Succssfully Applied LL", output);
			if(test) {
				logger.info("Mail sent successfully from apply ll");
			}
			else {
				logger.warn("Mail can not send from apply ll");
			}
			return usr;
		}catch(Exception err) {
			
			return null;
		}
	}
	
	/*
	  * @Params: pathVariable Integer Id
	  * @Name: applyDl
	  * @Return: String[dlNo]
	  * @PassByUrl: /{appId}
	  * @PassJsonVariables: {Null}
	  * @Desc: User applies Driving License after getting approved learning License
	  */
	
	/*TODO: Expiry Date should be updated to 15years
	 * 
	 */
	@PutMapping("/applyDl")
	public User applyDl(@RequestBody User user) {
		try {
		User oldUser=service.getLic(user.getAppId());
		oldUser.setDlNo(service.generateRandom());
		User newUser=service.updateLic(oldUser);
    	user.setExpiryDate((LocalDate.now().plusDays(1)).format(DateTimeFormatter.ofPattern("dd/MM/YYYY")).toString());
		String output= String.format("Hey, %s\n Your DL is applied Succssfully,\nYour Application ID is: %d\nYour LL Number is updated to this DL Number: %s\nYour DL Expiry Date is: %s\n\n\t **Do not try to reply, this is autogenerated mail**",newUser.getUserName(),newUser.getAppId(),newUser.getDlNo(),newUser.getExpiryDate());
		Boolean test=service.sendMail(newUser.getEmail(), "RTO - Succssfully Applied DL", output);
		if(test) {
			logger.info("Mail sent successfully from apply Dl");
		}
		else {
			logger.warn("Mail can not send from apply Dl");
		}
		return newUser;
		}
		catch(Exception e) {
			return null;
		}
		
	}
	

	
	 /*
	  * @Params: pathVariable String Id
	  * @Name: getLic
	  * @Return: User
	  * @PassByUrl: /{appId}
	  * @PassJsonVariables: {Null}
	  * @Desc: Getting a particular License details by ID.
	  */
	

	@PostMapping("/getLic")
	public User getLic(@RequestBody User user) {
		logger.info("Accessing getLicence Page");
		logger.info("Calling service.getLic()");
		User newUser1;
		List<User> users = service.getAllLic();
		if(user.getLlNo().matches("[0-9]+") && user.getLlNo().length() >= 2)
		{
			newUser1=service.getLic(Integer.parseInt(user.getLlNo()));
			if(newUser1!=null) {
				if(user.getDob().equals(newUser1.getDob()))
				{
					return newUser1;
				}
			}
			else {
				return null;
			}
		}
		else {
		for(User newUser: users) {
		if(  user.getLlNo().equals(newUser.getLlNo()) ||  user.getLlNo().equals(newUser.getDlNo()) ) {
			if(user.getDob().equals(newUser.getDob()))
			{
				return newUser;
			}
		}
		}
		}
		return null;
	}
	
	 
	 /*
	  * @Params: RequestBody User olduser
	  * @Name: TestDrive
	  * @Return: User
	  * @PassByUrl: Null
	  * @PassJsonVariables: {"appId":,"testDriveDate":}
	  * @Desc: TODO
	  */
	 
	 @PutMapping("/testDrive")
	 public User testDrive(@RequestBody User oldUser) {
		 try {
		User newUser=service.getLic(oldUser.getAppId());	
		//Setting the test drive date to today, if he is passed
		newUser.setTestDriveDate(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/YYYY")).toString());
	    User usr=service.updateLic(newUser); 
	    String testDriveStatus;
	    if(usr.getTestDriveDate()!=null) {
	    	testDriveStatus="Passed";
	    }
	    else {
	    	testDriveStatus="Failed";
	    }
	    String output= String.format("Hey, %s\n Your DL is applied Succssfully,\nYour Application ID is: %d\nYour LL Number is: %s\nYour TestDrive Status is: %s\n\n\t **Do not try to reply, this is autogenerated mail**",newUser.getUserName(),newUser.getAppId(),newUser.getLlNo(),testDriveStatus);
		Boolean test=service.sendMail(newUser.getEmail(), "RTO - Succssfully Appeared Drive Test", output);
		if(test) {
			logger.info("Mail sent successfully from apply ll");
		}
		else {
			logger.warn("Mail can not send from apply ll");
		}
		return usr;
		 }
		 catch(Exception e) {
			 return null;
		 }
	 }
	 
	 
	 /*
	  * @Params: pathVariable Integer id
	  * @Name: renewLic
	  * @Return: String[renewdate]
	  * @PassByUrl: /{appID}
	  * @PassJsonVariables: {Null}
	  * @Desc: User renews his/her license
	  */
	 
	 @PutMapping("/renewLic")
	 public User renewLic(@RequestBody User user) throws java.text.ParseException {
		 User usr=service.getLic(user.getAppId());	
		 User newUser;
		 boolean check=service.getDateDiff(user.getExpiryDate(),usr.getExpiryDate());
		 if(check) {
			 String newDate=(LocalDate.now().plusMonths(6)).format(DateTimeFormatter.ofPattern("dd/MM/YYYY")).toString();
			 usr.setExpiryDate(newDate); 
			 service.updateLic(usr);
			 newUser=service.getLic(usr.getAppId());
			 String output= String.format("Hey, %s\n Your Expiry Date is updated Succssfully,\nYour Application ID is: %d\nYour DL Number is: %s\nYour DL Expiry Date is: %s\n\n\t **Do not try to reply, this is autogenerated mail**",newUser.getUserName(),newUser.getAppId(),newUser.getDlNo(),newUser.getExpiryDate());
				Boolean test=service.sendMail(newUser.getEmail(), "RTO - Succssfully Renew Licence", output);
				if(test) {
					logger.info("Mail sent successfully from Renew Lic");
				}
				else {
					logger.warn("Mail can not send from Renew Lic");
				}
			 return newUser;
			 
		 }
		 return null;
	 }
	 
	 /*@Params: RequestBody User user
	  * @Name: setAllFiles
	  * @Return: String[renew files]
	  * @PassJsonVariables: {"id": ,"adharId":,"bloodGroupCertificate":,"certificate":}
	  * @Desc: TODO We are getting all the uploaded files of user like ID proofs.
	  */
	 @PutMapping("/uploadFiles")
	 public User uploadFiles(@RequestBody User user) {
		 try {
		 User oldUser=service.getLic(user.getAppId());
		 oldUser.setAdhar(user.getAdhar());
		 oldUser.setBloodGroupCertificate(user.getBloodGroupCertificate());
		 oldUser.setCertificate(user.getCertificate());
		 User newUser=service.updateLic(oldUser);
		 if(newUser.getAppId()!=null) {
			 return user;
		 }
		 String output= String.format("Hey, %s\n Your Files are  updated Succssfully,\nYour Application ID is: %d\nYour LL Number is: %s\nYour LL Expiry Date is: %s\nFiles Uploaded: 3\n\n\t **Do not try to reply, this is autogenerated mail**",newUser.getUserName(),newUser.getAppId(),newUser.getLlNo(),newUser.getExpiryDate());
			Boolean test=service.sendMail(newUser.getEmail(), "RTO - Successfully Files", output);
			if(test) {
				logger.info("Mail sent successfully from Upload Files");
			}
			else {
				logger.warn("Mail can not send from Upload Files");
			}
		 }
		 catch(Exception e) {
			 return null;
		 }
		 return null;
	 }
	  
	 
	   
		 

}